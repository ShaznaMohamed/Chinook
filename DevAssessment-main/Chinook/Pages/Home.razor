@page "/"
@attribute [Authorize]

@using Chinook.Models
@using Chinook.Services.Interfaces
@using Microsoft.EntityFrameworkCore

<PageTitle>Index</PageTitle>

<div class="d-flex align-items-start">
    <div class="flex-grow-1">
        <h1>Artists</h1>
    </div>
    <div class="text-center bg-blue-100">
        <input class="border-4 w-1/3 rounded m-6 p-6 h-8
               border-blue-300" @bind-value="SearchText"
               @bind-value:event="oninput"
               placeholder="Search by name" />
    </div>
</div>

@if (Artists == null)
{
    <Loading />
}
else
{
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Name</th>
                <th>Number of albums</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var artist in FilteredArtists)
            {
                <tr>
                    <td><a href="Artist/@artist.ArtistId">@artist.Name</a></td>
                    <td>@artist.Albums.Count()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Artist> Artists = new List<Artist>();
    private List<Artist> FilteredArtists = new List<Artist>();
    [Inject]
    public IArtistService _artistService { get; set; }

    private string _searchText = "";
    public string SearchText
    {
        get { return _searchText; }
        set
        {
            _searchText = value;
            FilteredArtists = SearchByName(value);
        }
    }

    protected override async Task OnInitializedAsync() {
        await InvokeAsync(StateHasChanged);
        Artists = FilteredArtists = await GetArtists();
    }

    public async Task<List<Artist>> GetArtists()
    {
        return await _artistService.GetArtists();
    }

    public List<Artist> SearchByName(string searchText)
    {
        return searchText != "" && Artists.Any() ? Artists.Where(s => s.Name != null && s.Name.ToLower().Contains(_searchText.ToLower())).ToList() : Artists;
    }
}
