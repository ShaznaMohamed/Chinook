@using System.Security.Claims
@using Chinook.Services.Interfaces
@attribute [Authorize]

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Chinook</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span>Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
        <div>
                @if (playlistNumber != 0)
                {
                    <NavLink class="nav-link" href="@($"playlist/{playlistNumber}")">
                        <i class="bi bi-music-note-list me-3" style="font-size: 1.25em"></i>My favorite tracks
                    </NavLink>
                }
        </div>
</div>

    </nav>
</div>

@code {
    [Inject]
    public IPlaylistService _playlistService { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }

    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    private long playlistNumber = 0;

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
        var currentUserId = await GetUserId();

        playlistNumber = await _playlistService.GetCurrentUserFavoritePlaylistId(currentUserId);
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }
}
